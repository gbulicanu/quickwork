# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - name: Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f Pipfile ]; then pipenv install --dev; fi
    - name: Lint
      run: |
        pipenv run pylint $(git ls-files '*.py')
    - name: Test
      run: |
        cp .env.template .env
        pipenv run pytest --cov-config=.coveragerc --cov-report xml --cov=app tests/
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        env_vars: OS,PYTHON
        fail_ci_if_error: false
        files: ./coverage.xml
        flags: unittests
        version: "v0.1.15"
    - name: Coverage
      id: coverage_comment
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Comment
      uses: actions/upload-artifact@v4
      if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
      with:
        # If you use a different name, update COMMENT_ARTIFACT_NAME accordingly
        name: python-coverage-comment-action
        # If you use a different name, update COMMENT_FILENAME accordingly
        path: python-coverage-comment-action.txt
    - name: Installer
      run: |
        pipenv run pyinstaller main.py -n qw
        ls -al dist/qw/

    - name: Get version
      id: get_version
      run: |
        VERSION=$(python -c "import re; f=open('main.py').read(); m=re.search(r'__version__\s*=\s*[\'\\\"]([^\'\\\"]+)[\'\\\"]', f); print(m.group(1))")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Zip artifact
      run: |
        cd dist
        zip -r qw-${{ steps.get_version.outputs.version }}.zip qw

    - name: Tar artifact
      run: |
        cd dist
        tar -czvf qw-${{ steps.get_version.outputs.version }}.tar.gz qw

    - name: Upload Installer Artifact (zip)
      uses: actions/upload-artifact@v4
      with:
        name: qw-${{ steps.get_version.outputs.version }}
        path: dist/qw-${{ steps.get_version.outputs.version }}.zip

    - name: Upload Installer Artifact (tar.gz)
      uses: actions/upload-artifact@v4
      with:
        name: qw-${{ steps.get_version.outputs.version }}-tar
        path: dist/qw-${{ steps.get_version.outputs.version }}.tar.gz

    - name: Upload Release Assets
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/qw-${{ steps.get_version.outputs.version }}.zip
          dist/qw-${{ steps.get_version.outputs.version }}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

